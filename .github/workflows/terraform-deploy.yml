name: Terraform Deploy

on:
  push:
    branches:
      - main  # Adjust this to your main branch name if different
  workflow_dispatch:  # Allow manual triggering

env: # hard-code resource names
  AWS_REGION: us-east-1
  TFSTATE_KEY: application-signals/demo-applications
  TFSTATE_BUCKET: tfstate-0b6c1770-b7ce-423a-9b2d-781805b91dcc # prerequisite: manually create a bucket using  "aws s3 mb s3://tfstate-$(uuidgen | tr A-Z a-z)" and paste bucket name here.
  TFSTATE_REGION: us-east-1
  TF_VAR_cluster_name: app-signals-demo
  TF_VAR_cloudwatch_observability_addon_version: v3.6.0-eksbuild.2
  TOPOLOGY_BUCKET: cicd-topology
  AWS_EXECUTION_ENV: ${{ github.repository }}/actions/run/${{ github.run_id }}/${{ github.job }}

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 5

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: terraform/eks
        run: |
          terraform init -backend-config="bucket=${{ env.TFSTATE_BUCKET }}" \
                        -backend-config="key=${{ env.TFSTATE_KEY }}" \
                        -backend-config="region=${{ env.TFSTATE_REGION }}"

      - name: Terraform Apply
        working-directory: terraform/eks
        run: terraform apply --auto-approve

      - name: Create Topology Data Folder
        run: mkdir -p ./topology
      
      - name: Generate Code-to-Cloud Topology
        run: |
          ./collect-commit-info.sh "${{github.event.before}}" "${{github.sha}}"

      - name: Archive Code-to-Cloud Topology
        uses: actions/upload-artifact@v4
        with:
          name: commit-info.json
          path: |
            ./topology/commit-info.json

      - name: Generate Software Dependency Topology
        uses: anchore/sbom-action@v0
        with:
          format: cyclonedx-json
          artifact-name: application-signals-demo.cyclonedx.json
          path: .
          output-file: './topology/application-signals-demo.cyclonedx.json'

      - name: Generate IaC Topology
        working-directory: terraform/eks
        run: |
          terraform graph > ../../topology/terraform.graph.json
          terraform state pull > ../../topology/terraform.state.json

      - name: Archive IaC Topology
        uses: actions/upload-artifact@v4
        with: # extract terraform resources information (state) and their relationshiop (graph)
          name: terraform.topology.json
          path: |
            ./topology/terraform.graph.json
            ./topology/terraform.state.json
            
      - name: Upload IaC Topology Files to S3
        run: |
          # Upload terraform.graph.json
          aws s3 cp ./topology/terraform.graph.json s3://${{ env.TOPOLOGY_BUCKET }}/terraform.graph.json/${{ github.sha }}/
          
          # Upload terraform.state.json
          aws s3 cp ./topology/terraform.state.json s3://${{ env.TOPOLOGY_BUCKET }}/terraform.state.json/${{ github.sha }}/
    
      - name: Build Docker images
        run: ./mvnw clean install -P buildDocker
        
      - name: Push Docker images to ECR
        run: |
          export ACCOUNT=$(aws sts get-caller-identity | jq .Account -r)
          export REGION=${{ env.AWS_REGION }}
          # ./push-ecr.sh
      
      - name: Create kubeconfig directory
        run: mkdir -p ${{ github.workspace }}/.kube

      - name: Set KUBECONFIG environment variable
        run: echo KUBECONFIG="${{ github.workspace }}/.kube/config" >> $GITHUB_ENV

      - name: Set up kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.TF_VAR_cluster_name }} --region ${{ env.AWS_REGION }} --alias ${{ env.TF_VAR_cluster_name }}

      - name: Run kubectl commands
        run: |
          ./scripts/eks/appsignals/tf-deploy-k8s-res.sh
      
      - name: Upload Application Topology Files to S3
        run: |          
          # Upload SBOM if available
          if [ -f "./topology/application-signals-demo.cyclonedx.json" ]; then
            aws s3 cp ./topology/application-signals-demo.cyclonedx.json s3://${{ env.TOPOLOGY_BUCKET }}/cyclonedx.json/${{ github.sha }}/
          fi
          
          # Upload commit info if available
          if [ -f "./topology/commit-info.json" ]; then
            aws s3 cp ./topology/commit-info.json s3://${{ env.TOPOLOGY_BUCKET }}/commit-info.json/${{ github.sha }}/
          fi
          
          echo "Topology files uploaded to S3 bucket '${{ env.TOPOLOGY_BUCKET }}' with commit ID ${{ github.sha }} as prefix"

      - name: Output Application URL
        run: |
          endpoint="http://$(kubectl get ingress -o json --output jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}')"
          echo "Application is available at: $endpoint"
          echo "APPLICATION_URL=$endpoint" >> $GITHUB_ENV
